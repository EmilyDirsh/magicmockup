// Generated by CoffeeScript 1.6.3
(function() {
  this.magicmockup = (function() {
    var bindTriggers, defaultLayer, doc, filter, init, layers, _dispatch, _fade, _fetch, _findFilters, _getDescription, _getHash, _getInk, _handleClick, _handleHover, _hasDescription, _hidden, _hide, _hideGroups, _initLayers, _setInitialPage, _show, _showGroup, _stripInlineJS, _toArray, _toMS;
    layers = {};
    filter = {};
    defaultLayer = '';
    doc = null;
    _toArray = function(collection) {
      return [].slice.call(collection);
    };
    _toMS = function(time) {
      return parseFloat(time) * 1000;
    };
    _getInk = function(el, attr) {
      var inkNS;
      inkNS = 'http://www.inkscape.org/namespaces/inkscape';
      return el.getAttributeNS(inkNS, attr);
    };
    _initLayers = function() {
      var group, groups, label, mode, _i, _len;
      groups = _toArray(document.getElementsByTagName('g'));
      for (_i = 0, _len = groups.length; _i < _len; _i++) {
        group = groups[_i];
        mode = _getInk(group, 'groupmode');
        if (mode === 'layer') {
          label = _getInk(group, 'label');
          layers[label] = group;
        }
      }
    };
    _fetch = function(id) {
      if (layers[id] != null) {
        return layers[id];
      } else {
        return document.getElementById(id);
      }
    };
    _findFilters = function() {
      var f, filters, label, _i, _len, _results;
      filters = _toArray(document.getElementsByTagName('filter'));
      _results = [];
      for (_i = 0, _len = filters.length; _i < _len; _i++) {
        f = filters[_i];
        label = _getInk(f, 'label');
        _results.push(filter[label] = f.id);
      }
      return _results;
    };
    _hide = function(id) {
      return _fetch(id).style.display = 'none';
    };
    _show = function(id) {
      return _fetch(id).style.display = 'block';
    };
    _hidden = function(id) {
      return _fetch(id).style.display === 'none';
    };
    _fade = function(id, duration) {
      var el;
      el = _fetch(id);
      el.setAttribute("style", "transition: " + duration + " opacity; opacity: 0");
      setTimeout(function() {
        return el.style.display = 'none';
      }, _toMS(duration));
    };
    _dispatch = function(command, val) {
      var act, p, params;
      act = {
        load: function(url) {
          url = url.shift();
          return window.location = url || val;
        },
        next: function(location) {
          var layer, _i, _len;
          location = location.shift();
          if (location.match(/#/)) {
            return act.load(location);
          } else {
            for (_i = 0, _len = layers.length; _i < _len; _i++) {
              layer = layers[_i];
              if (layer.style.display !== 'none') {
                layer.style.display = 'none';
              }
            }
            _show(location);
            return window.location.hash = location;
          }
        },
        show: function(show) {
          var id, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = show.length; _i < _len; _i++) {
            id = show[_i];
            _results.push(_show(id));
          }
          return _results;
        },
        hide: function(hide) {
          var id, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = hide.length; _i < _len; _i++) {
            id = hide[_i];
            _results.push(_hide(id));
          }
          return _results;
        },
        toggle: function(toggle) {
          var id, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = toggle.length; _i < _len; _i++) {
            id = toggle[_i];
            if (_hidden(id)) {
              _results.push(_show(id));
            } else {
              _results.push(_hide(id));
            }
          }
          return _results;
        },
        fadeOut: function(params) {
          var duration;
          console.log('fadeing', params);
          duration = params[1] || ".5s";
          console.log('duration', duration);
          return _fade(params[0], duration);
        }
      };
      params = val != null ? val.split(',') : void 0;
      params = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = params.length; _i < _len; _i++) {
          p = params[_i];
          _results.push(p.trim());
        }
        return _results;
      })();
      return typeof act[command] === "function" ? act[command](params) : void 0;
    };
    _getDescription = function(el) {
      return (el.getElementsByTagName('desc'))[0].textContent;
    };
    _hasDescription = function(el) {
      return (el.getElementsByTagName('desc')).length > 0;
    };
    _stripInlineJS = function() {
      var el, onclickElements, _i, _j, _len, _len1;
      onclickElements = document.querySelector("[onclick]");
      if (!(onclickElements != null ? onclickElements.length : void 0)) {
        return;
      }
      if (console && console.warn) {
        if (typeof console.group === "function") {
          console.group('Warning: inline JavaScript found (and deactivated)');
        }
        for (_i = 0, _len = onclickElements.length; _i < _len; _i++) {
          el = onclickElements[_i];
          console.warn(el.id, ":", el.onclick);
        }
        if (typeof console.groupEnd === "function") {
          console.groupEnd();
        }
      }
      for (_j = 0, _len1 = onclickElements.length; _j < _len1; _j++) {
        el = onclickElements[_j];
        el.onclick = void 0;
      }
    };
    _getHash = function() {
      return window.location.hash.substr(1);
    };
    _hideGroups = function() {
      var el, g, _i, _len, _results;
      g = _toArray(document.getElementsByTagName('g'));
      _results = [];
      for (_i = 0, _len = g.length; _i < _len; _i++) {
        el = g[_i];
        _results.push(el.style.display = "none");
      }
      return _results;
    };
    _showGroup = function(group) {
      var g;
      if (typeof group !== 'string') {
        group = _getHash();
      }
      g = document.getElementById(group);
      if (g != null) {
        _hideGroups();
        _dispatch(this, ['next', group]);
      }
    };
    _setInitialPage = function() {
      var group;
      group = _getHash();
      if (group) {
        return _showGroup(group);
      }
    };
    _handleClick = function(e) {
      var action, actionArr, actions, _i, _len, _ref;
      actions = _getDescription(e.currentTarget);
      if (!actions) {
        return;
      }
      _ref = actions.split(/\n/);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        action = _ref[_i];
        actionArr = action.split(/\=/);
        _dispatch(actionArr[0], actionArr[1]);
      }
    };
    _handleHover = function(e) {
      var el;
      el = e.currentTarget;
      if (_getDescription(el)) {
        if (filter.hover) {
          el.style.filter = "url(#" + filter.hover + ")";
        }
        if (el.hoverable !== true) {
          el.hoverable = true;
          el.style.cursor = "pointer";
        }
      }
    };
    bindTriggers = function() {
      var descs, el, _i, _len, _results;
      descs = _toArray(document.getElementsByTagName('desc'));
      _results = [];
      for (_i = 0, _len = descs.length; _i < _len; _i++) {
        el = descs[_i];
        el.parentElement.addEventListener('click', _handleClick);
        _results.push(el.parentElement.addEventListener('mouseover', _handleHover));
      }
      return _results;
    };
    init = function() {
      _initLayers();
      _setInitialPage();
      _findFilters();
      _stripInlineJS();
      window.addEventListener('hashchange', _showGroup);
      return bindTriggers();
    };
    return {
      init: init,
      bindTriggers: bindTriggers
    };
  })();

  window.onload = function() {
    return magicmockup.init();
  };

}).call(this);
